---
description: Enforce minimal comments in the codebase. Comments should only be used when absolutely necessary to explain complex logic or non-obvious decisions.
globs: **/*.py
alwaysApply: false
---

# No Comments Rule

This rule enforces a minimal comment policy in the codebase. The goal is to write self-documenting code that is clear and understandable without relying on comments.

## Guidelines

1. **No Docstrings**: Do not use docstrings for modules, classes, or functions unless they are part of a public API.

2. **Self-Documenting Code**: Write code that is self-documenting through:
   - Clear and descriptive variable names
   - Well-structured functions with single responsibilities
   - Meaningful function and class names that describe their purpose
   - Type hints to clarify input/output types

3. **When Comments Are Allowed**:
   - Complex algorithms that require explanation
   - Non-obvious business logic decisions
   - Temporary workarounds with TODO comments
   - License/copyright headers if required

4. **Comment Style When Needed**:
   - Keep comments concise and to the point
   - Place comments on their own line above the code they describe
   - Update or remove comments when the code changes

## Examples

### Bad (Using Comments):
```python
# Check if user exists and has permissions
if user and user.role == "admin":
    perform_action()
```

### Good (Self-Documenting):
```python
def is_authorized_admin(user: User) -> bool:
    return user and user.role == "admin"

if is_authorized_admin(current_user):
    perform_action()
```

### When Comments Are Appropriate:
```python
# Workaround for API rate limiting - TODO: Remove once rate limiting is implemented
time.sleep(1)

# Dijkstra's algorithm for finding shortest path
def find_shortest_path(graph: Graph, start: Node, end: Node) -> Path:
    # Implementation details...
``` 